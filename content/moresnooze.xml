<?xml version="1.0"?>
<!--
   - ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is calendar views.
   -
   - The Initial Developer of the Original Code is Oracle Corporation
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Stuart Parmenter <stuart.parmenter@oracle.com>
   -   Simon Paquet <bugzilla@babylonsounds.com>
   -   Joey Minta <jminta@gmail.com>
   -   Stefan Sitter <ssitter@googlemail.com>
   -   Philipp Kewisch <mozilla@kewis.ch>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings
[
  <!ENTITY % dtd1 SYSTEM "chrome://calendar/locale/global.dtd" > %dtd1;
  <!ENTITY % dtd2 SYSTEM "chrome://calendar/locale/calendar.dtd" > %dtd2;
]>

<bindings id="calendar-alarms"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xbl="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="calendar-snooze-popup">
    <content ignorekeys="true">
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <xul:menuitem oncommand="snoozeItem(event)"/>
      <children/>
      <xul:menuseparator/>
      <xul:hbox class="snooze-options-box">
        <xul:textbox anonid="snooze-value-textbox"
                     oninput="updateAccessibleName()"
                     onselect="updateAccessibleName()"
                     type="number"
                     hidespinbuttons="true"
                     size="3"/>
        <xul:menulist anonid="snooze-unit-menulist"
                      class="snooze-unit-menulist menuitem-non-iconic"
                      allowevents="true">
         <xul:menupopup anonid="snooze-unit-menupopup"
                        position="after_start"
                        ignorekeys="true"
                        class="menulist-menupopup">
           <xul:menuitem closemenu="single" class="unit-menuitem" value="1"/>
           <xul:menuitem closemenu="single" class="unit-menuitem" value="60"/>
           <xul:menuitem closemenu="single" class="unit-menuitem" value="1440"/>
         </xul:menupopup>
        </xul:menulist>
        <xul:toolbarbutton anonid="snooze-popup-ok"
                           class="snooze-popup-button snooze-popup-ok-button"
                           oncommand="snoozeOk()"/>
        <xul:toolbarbutton anonid="snooze-popup-cancel"
                           class="snooze-popup-button snooze-popup-cancel-button"
                           aria-label="&calendar.alarm.snooze.cancel;"
                           oncommand="snoozeCancel()"/>
      </xul:hbox>
    </content>
    <implementation>
      <constructor><![CDATA[
        moreSnooze();
        
        let snoozePref = getPrefSafe("calendar.alarms.defaultsnoozelength", 0);
        if (snoozePref <= 0) {
          snoozePref = 5;
        }

        let unitList = document.getAnonymousElementByAttribute(this, "anonid", "snooze-unit-menulist");
        let unitValue = document.getAnonymousElementByAttribute(this, "anonid", "snooze-value-textbox");

        let selectedIndex = 0;
        if ((snoozePref % 60) == 0) {
            snoozePref = snoozePref / 60;
            if ((snoozePref % 24) == 0) {
                snoozePref = snoozePref / 24;
                selectedIndex = 2; // Days
            } else {
                selectedIndex = 1; // Hours
            }
        } else {
            selectedIndex = 0; // Minutes
        }

        unitList.selectedIndex = selectedIndex;
        unitValue.value = snoozePref;

        updateAccessibleName();
      ]]></constructor>

      <method name="snoozeAlarm">
        <parameter name="minutes"/>
        <body><![CDATA[
          let snoozeEvent = document.createEvent('Events');
          snoozeEvent.initEvent('snooze', true, false);
          snoozeEvent.detail = minutes;

          // The onsnooze attribute is set on the menupopup, this binding is
          // instanciated on the menupopup's arrowscrollbox. Therefore we need
          // to go up one node.
          let handler = this.parentNode.getAttribute("onsnooze");
          let cancel = false;
          if (handler) {
              let fn = new Function("event", handler);
              cancel = (fn.call(this, snoozeEvent) === false);
          }

          if (!cancel) {
              this.dispatchEvent(snoozeEvent);
          }
        ]]></body>
      </method>

      <method name="snoozeItem">
        <parameter name="event"/>
        <body><![CDATA[
          this.snoozeAlarm(event.target.value);
        ]]></body>
      </method>

      <method name="snoozeOk">
        <body><![CDATA[
          let unitList = document.getAnonymousElementByAttribute(this, "anonid", "snooze-unit-menulist");
          let unitValue = document.getAnonymousElementByAttribute(this, "anonid", "snooze-value-textbox");

          let minutes = (unitList.value || 1) * unitValue.value;
          this.snoozeAlarm(minutes);
        ]]></body>
      </method>

      <method name="snoozeCancel">
        <body><![CDATA[
          this.parentNode.hidePopup();
        ]]></body>
      </method>

      <method name="updateAccessibleName">
        <body><![CDATA[
          let unitList = document.getAnonymousElementByAttribute(this, "anonid", "snooze-unit-menulist");
          let unitPopup = document.getAnonymousElementByAttribute(this, "anonid", "snooze-unit-menupopup");
          let unitValue = document.getAnonymousElementByAttribute(this, "anonid", "snooze-value-textbox");
          let okButton = document.getAnonymousElementByAttribute(this, "anonid", "snooze-popup-ok");

          function unitName(list) {
              return {1: "unitMinutes", 60: "unitHours", 1440: "unitDays"}[list.value] || "unitMinutes";
          }

          let pluralString = calGetString("calendar", unitName(unitList));
          let unitPlural = PluralForm.get(unitValue.value, pluralString)
                                     .replace("#1", unitValue.value);

          let accessibleString = calGetString("calendar-alarms",
                                              "reminderSnoozeOkA11y",
                                              [unitPlural]);
          okButton.setAttribute("aria-label", accessibleString);

          let items = unitPopup.getElementsByTagName("xul:menuitem");
          for (let menuItem of items) {
              pluralString = calGetString("calendar", unitName(menuItem));
              menuItem.label = PluralForm.get(unitValue.value, pluralString)
                                         .replace("#1", "").trim();
          }
        ]]></body>
      </method>
      
      <method name="moreSnooze">
        <body><![CDATA[
	    // variables
	    let moreSnoozeString = cal.getPrefSafe("extensions.moresnooze.snooze");
	    let moreSnoozeItem = document.getAnonymousNodes(this);
	    let parsedSnooze;
	    var compteur = 0;
	    
	    if (moreSnoozeString != undefined){
	      moreSnoozeString = moreSnoozeString.split('*');
	      if (moreSnoozeChrome.in_array(moreSnoozeChrome.COMPATIBLES_VERSIONS, moreSnoozeString[0])){
		try {parsedSnooze = JSON.parse(moreSnoozeString[1]);
		} catch (e) {
		  parsedSnooze = moreSnoozeChrome.SNOOZE_LIST;
		}
	      } else {
	        parsedSnooze = moreSnoozeChrome.SNOOZE_LIST;
	      }
	    } else {
	      parsedSnooze = moreSnoozeChrome.SNOOZE_LIST;
	    }
	    	    
	    for each (let snooze in parsedSnooze) {
	      if ((snooze.SL_id == undefined) || (snooze.SL_checked == undefined) || (snooze.SL_delay == undefined)){
		  moreSnoozeItem[compteur].setAttribute("hidden", "true");
	      } else {
		if (snooze.SL_checked == "y"){
		    moreSnoozeItem[compteur].setAttribute("label", moreSnoozeChrome.libelle_tab[compteur]);
		    moreSnoozeItem[compteur].setAttribute("value", snooze.SL_delay);
		} else {
		    moreSnoozeItem[compteur].setAttribute("hidden", "true");
		}
	      }
	      compteur++;
	    }
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
